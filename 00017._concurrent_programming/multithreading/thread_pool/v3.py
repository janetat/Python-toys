"""
    1. 无节制的创建和销毁线程是一种极大的浪费。
    2. 线程池控制了工作的线程数量，也避免了创建和销毁线程的巨大开销。重复利用执行完的线程。
    3. concurrent.futures 模块，这个模块包含了线程池和进程池、管理并行编程任务、处理非确定性的执行流程、进程/线程同步等功能。
    4. concurrent.futures对threading 和 multiprocessing 的进行了高级别的抽象， 暴露出统一的接口
"""

